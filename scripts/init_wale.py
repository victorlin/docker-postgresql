#!/usr/bin/env python
import os
import sys
import string

CONFIG_PATH = '/etc/postgresql/9.3/main/postgresql.conf'
CRONTAB_PATH = '/etc/cron.d/wal-e'


def main():
    if int(os.getenv('APPEND_WAL_CONFIG', False)):
        print >>sys.stderr, 'Skip appending WAL config'
    else:
        with open(CONFIG_PATH, 'rt') as config_file:
            cfg_lines = map(string.strip, config_file.readlines())

        cfg_lines.extend([
            ""
            "# Generated by init_wale.py",
            "wal_level = archive",
            "archive_mode = on",
            "archive_command = 'envdir /etc/wal-e.d/env wal-e wal-push %p'",
            "archive_timeout = 60",
        ])

        with open(CONFIG_PATH, 'wt') as config_file:
            config_file.write('\n'.join(cfg_lines))
        print >>sys.stderr, 'Updated postgresql config', CONFIG_PATH

    push_schedule = os.getenv('WAL_PUSH_SCHEDULE')
    rotate_schedule = os.getenv('WAL_ROTATE_SCHEDULE')
    if not push_schedule and not rotate_schedule:
        print >>sys.stderr, 'Skip WAL-E backup routine'
    else:
        lines = [
            'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
        ]
        if push_schedule:
            lines.append(
                '{} postgres envdir /etc/wal-e.d/env wal-e backup-push /data'
                .format(push_schedule)
            )
        if push_schedule:
            lines.append(
                '{} postgres envdir /etc/wal-e.d/env wal-e delete --confirm retain 7'
                .format(rotate_schedule)
            )
        with open(CRONTAB_PATH, 'wt') as config_file:
            config_file.write('\n'.join(lines))


if __name__ == '__main__':
    main()
